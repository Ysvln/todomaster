* reducer

export const countReducer = (state, action) =>{
    switch (action.type) {
        case "INCREMENT" :
            return state + action.count;
        case "DECREMENT" :
            return state + action.count;
        default : 
            return state
    }
};

action.type => action이라는 객체에 type이라는 값에 따라서 return 해주는 값이 다르다.
    ex) action.type에 INCREMENT가 있다면 state에 action.count를 더한 값을 return 
        ===> state를 관리하는 로직을 바깥으로 뺀다. (원래 컴포넌트 안에 사용했던 것) 

    특정 state를 바꿀 수 있는 기능이 바깥에 있으면 관리하기 용이하다


1. 재사용성

2. 가독성 : 컴포넌트 안에 복잡한 비즈니스 로직이 나열되어 보기 어려워지는 것을 방지

3. 유지보수


===> 위 이유로 비즈니스 로직을 분리하여 외부 파일로 관리한다.
===> flux 패턴 : action이라는 객체를 store에 전달. (전역으로 사용하는 비즈니스 로직이나 state가 있는 곳에 전달. 전달할 수 있는 매개체 ==> dispatcher를 사용한다.)


useReducer 함수를 만들어 외부에 있던 reducer를 넣어준다.


const onIncrementCount = () => {
    dispatch {
        type : "INCREMENT",
        count : 1,
    };
};

>> onIncrementCount 버튼을 눌렀을 때 전달한다 (dispatch) ==> store에 ==> 해당 객체를! ===> 이때 객체가 action이 된다.


*) 비즈니스 로직 : 기능을 말함


============================================================================================================================================================


* context 

     - state를 전역으로 사용할 수 있게 하려고

     C 
     B 
     A   D 

     => C에 state를 만든다 - B에 보내야하고 A에도 보내야 함
     => B는 C의 state가 필요하지 않고 전달만 하는 역할 ===> 추적이 어려워진다.
     ===> 전역에서 관리해주자!! (C에서 B를 거치지 않고 A에서 바로 state를 가져다가 쓸 수 있게 만들자.)


    
    export const UserContext = createContext()    => 비어있는 저장소를 만든다. (전역 저장소를 만들겠다.)

    ...

    <UserContext.Provider value={state}> ... </UserContext.Provider>  => UserContext에 Provider라는 덮개(!!)를 만들어준다. 이 안에 value(값)을 전역으로 만들어준 state로 채운다.



============================================================================================================================================================


cf . context는 전역으로 상태를 전달하기 위한 것
     reducer는 상태 비즈니스 로직을 바깥으로 빼기 위한 것

     전역 상태관리를 위해 이 둘을 자주 같이 사용한다.




============================================================================================================================================================


1. contexts/todo.js 
2. app.js 

